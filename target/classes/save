package ua.kiev.prog.config;

import lombok.extern.slf4j.Slf4j;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import ua.kiev.prog.models.Contact;
import ua.kiev.prog.models.Group;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Slf4j
public class Test {

    private static final Logger LOGGER = LogManager.getLogger(Test.class);

    public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException {
        Group group = new Group();

        Document document;

        try {
            document = buildDocument();
        } catch (Exception e) {
            System.out.println("Pars exeption " + e.toString());
            return;
        }


        // повернути всі тегі які з нейм
        //  NodeList list =  dBuilder.getElementsByTagName("name"); // другий спосіб отримати по тег нейму
        //  System.out.println(list.item(0).getTextContent()); // return first name

        Node rootNode = document.getFirstChild();
        NodeList list = rootNode.getChildNodes();

        // String name = null;
        Node contactNode = null;
        String groupName = null;

        for (int i = 0; i < list.getLength(); i++) {
            // якщо це єлемент групи то друк
            if (list.item(i).getNodeType() != Node.ELEMENT_NODE) {
                continue;
            }
            //  System.out.println("====="+list.item(i).getNodeName()); // return name then contact


            switch (list.item(i).getNodeName()) {
                case "name": {
                    groupName = list.item(i).getTextContent(); // витягли груп нейм
                    break;
                }

                case "contact": {
                    contactNode = list.item(i);
                    break;
                }
                default:
                    throw new IllegalStateException("Unexpected value: " + list.item(i).getNodeName());
            }
        }

        if (contactNode == null) {
            return;
        }

        group.setName(groupName);

     /*   List<Contact> contacts = new ArrayList<>();

        NodeList contactList = contactNode.getChildNodes();

        // цей фор проходить всередині контактів і отримує всю інфу про поля контактів
        for (int i = 0; i < contactList.getLength(); i++) {
            if (contactList.item(i).getNodeType() != Node.ELEMENT_NODE) {
                continue;
            }
            if (!contactList.item(i).getNodeName().equals("element")) {
                continue;
            }
            String name = "";
            String surname = "";
            String phone = "";
            String email = "";

            NodeList elementsChilds = contactList.item(i).getChildNodes();

            for (int j = 0; j < elementsChilds.getLength(); j++) {
                if (elementsChilds.item(j).getNodeType() != Node.ELEMENT_NODE) {
                    continue;
                }
                switch (elementsChilds.item(j).getNodeName()) {
                    case "name": {
                        name = elementsChilds.item(j).getTextContent();
                        break;
                    }
                    case "surname": {
                        surname = elementsChilds.item(j).getTextContent();
                        break;
                    }
                    case "phone": {
                        phone = elementsChilds.item(j).getTextContent();
                        break;
                    }
                    case "email": {
                        email = elementsChilds.item(j).getTextContent();
                        break;
                    }
                }
            }

            Contact contact = new Contact(group, name, surname, phone, email);
            contacts.add(contact);
        }  */



       List<Contact> contactList =  parseContacts(contactNode);
        System.out.println(contactList);
    }
    // метод для зчитування директорії
    public static Document buildDocument() throws Exception {

        File file = new File("Contacts.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        return dbFactory.newDocumentBuilder().parse(file);
    }

    // метод для парсингу саме контактів те що в тегу контакти
    public static List<Contact> parseContacts(Node contactsNode) {
        List<Contact> contacts = new ArrayList<>();
        NodeList contactList = contactsNode.getChildNodes();
        // цей фор проходить всередині контактів і отримує всю інфу про поля контактів
        for (int i = 0; i < contactList.getLength(); i++) {
            if (contactList.item(i).getNodeType() != Node.ELEMENT_NODE) {
                continue;
            }
            if (!contactList.item(i).getNodeName().equals("element")) {
                continue;
            }
            String name = "";
            String surname = "";
            String phone = "";
            String email = "";

            NodeList elementsChilds = contactList.item(i).getChildNodes();

            for (int j = 0; j < elementsChilds.getLength(); j++) {
                if (elementsChilds.item(j).getNodeType() != Node.ELEMENT_NODE) {
                    continue;
                }
                switch (elementsChilds.item(j).getNodeName()) {
                    case "name": {
                        name = elementsChilds.item(j).getTextContent();
                        break;
                    }
                    case "surname": {
                        surname = elementsChilds.item(j).getTextContent();
                        break;
                    }
                    case "phone": {
                        phone = elementsChilds.item(j).getTextContent();
                        break;
                    }
                    case "email": {
                        email = elementsChilds.item(j).getTextContent();
                        break;
                    }
                }
            }

            Contact contact = new Contact(name, surname, phone, email);
            contacts.add(contact);
        }
        return contacts;
    }
}
